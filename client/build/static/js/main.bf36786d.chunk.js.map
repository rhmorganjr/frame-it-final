{"version":3,"sources":["utils/auth.js","components/Header/index.js","components/Feed/index.js","utils/queries.js","pages/Home.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Profile.js","App.js","serviceWorker.js","index.js","assets/images/James Hall/JamesHall_1.jpg","assets/images/James Hall/JamesHall_2.jpg","assets/images/James Hall/JamesHall_3.jpg","assets/images/James Hall/JamesHall_4.jpg","assets/images/James Hall/JamesHall_5.jpg"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Header","to","Auth","loggedIn","onClick","event","preventDefault","logout","Feed","Container","fluid","Row","Col","md","className","Image","src","photoOne","Button","photoTwo","photoThree","photoFour","photoFive","gql","Home","console","log","LOGIN_USER","ADD_USER","Login","props","useState","email","password","formState","setFormState","useMutation","login","handleChange","error","target","name","value","handleFormSubmit","a","variables","data","Card","Body","Form","onSubmit","Group","Label","Control","type","placeholder","id","onChange","Signup","username","firstName","lastName","addUser","Profile","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.bf36786d.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    // retrive data saved in token\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n    // check if the user is still logged in\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken();\n        // use type coersion to check if token is NOT undefined and the token is NOT expired\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    // check if the token has expired\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if(decoded.exp < Date.now() / 1000) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (err) {\n            return false;\n        }\n    }\n\n    // retrieve token from localStorage\n    getToken() {\n        // retrieves the user token from localStorage\n        return localStorage.getItem('id_token');\n    }\n\n    // set token to localStorage and reload page to homepage\n    login(idToken) {\n        // saves user token to local storage\n        localStorage.setItem('id_token', idToken);\n\n        window.location.assign('/');\n    }\n\n    // clear token from localStorage and force logout with reload\n    logout() {\n        // clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        // this will reload the page and reset the state of the application\n        window.location.assign('/');\n    }\n}\n\nexport default new AuthService();","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Auth from '../../utils/auth';\n\nconst Header = () => {\n\n    const logout = event => {\n        event.preventDefault();\n        Auth.logout();\n    };\n    return (\n        <header>\n            <Link to='/'>\n                <h1>FrameIt</h1>\n            </Link>\n\n            {Auth.loggedIn() ? (\n            <>\n              <Link to='/profile'><h4>Profile</h4></Link>\n              <Link to=\"/\" onClick={logout}>\n                <h4>Logout</h4>\n              </Link>\n            </>\n            ) : (\n                <>\n                    <Link to='/login'><h4>Login</h4></Link>\n                    <Link to='/signup'><h4>Signup</h4></Link>\n                </>\n            )}\n        </header>\n    )\n}\n\nexport default Header;\n\n","import React from 'react';\nimport { Button, Container, Row, Col, Image } from 'react-bootstrap';\nimport photoOne from '../../assets/images/James Hall/JamesHall_1.jpg'\nimport photoTwo from '../../assets/images/James Hall/JamesHall_2.jpg'\nimport photoThree from '../../assets/images/James Hall/JamesHall_3.jpg'\nimport photoFour from '../../assets/images/James Hall/JamesHall_4.jpg'\nimport photoFive from '../../assets/images/James Hall/JamesHall_5.jpg'\n// import '../../App.css';\n\n\nconst Feed = () => {\n    return (\n        <div>\n            <Container fluid>\n                <Row>\n                    <Col md={4}>\n                        <h4 className='m-3'>JamesHall</h4>\n                        <Image fluid src={photoOne} />\n                        <p className='m-3 font-size:{1rem}'>Black-White Flower</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>$75</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <h4 className='m-3'>JamesHall</h4>\n                        <Image fluid src={photoTwo} />\n                        <p className='m-3'>Succulent</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>$55</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <h4 className='m-3'>JamesHall</h4>\n                        <Image fluid src={photoThree} />\n                        <p className='m-3'>Skeleton</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>$99</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <h4 className='m-3'>JamesHall</h4>\n                        <Image fluid src={photoFour} />\n                        <p className='m-3'>Orange Flower</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>$29</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <h4 className='m-3'>JamesHall</h4>\n                        <Image fluid src={photoFive} />\n                        <p className='m-3'>Red Flower</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>$29</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\nexport default Feed;","import gql from 'graphql-tag';\n\nexport const QUERY_USERS = gql`\n    query users {\n        _id: ID\n        username: String\n        firstName: String\n        lastName: String\n        email: String\n    }\n`\n\n\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME = gql`\n    {\n        me {\n            _id\n            username\n            email\n            friendCount\n            thoughts {\n                _id\n                thoughtText\n                createdAt\n                reactionCount\n                reactions {\n                    _id\n                    createdAt\n                    reactionBody\n                    username\n                }\n            }\n            friends {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const QUERY_ME_BASIC = gql `\n    {\n        me {\n            _id\n            username\n            email\n            friendCount\n            friends {\n                _id\n                username\n            }\n        }\n    }\n`;\n\n\nexport const QUERY_ITEMS = gql`\n    query itemss {\n        _id\n        title\n        price\n        quantity\n        image\n    }\n`","import React from 'react';\nimport Feed from '../components/Feed';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_ITEMS } from '../utils/queries';\n\nconst Home = () => {\n\nconsole.log(\"Home.js\");\n    return(\n        <main>\n            <Feed />\n        </main>\n    )\n}\n\nexport default Home;","import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql`\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                firstName\n                lastName\n            }\n        }\n    }\n`;\n\nexport const ADD_USER = gql `\n    mutation addUser($username: String!, $email: String!, $password: String!, $firstName: String!, $lastName: String!) {\n        addUser(username: $username, email:$email, password: $password, firstName: $firstName, lastName: $lastName) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_FRIEND = gql`\n  mutation addFriend($id: ID!) {\n    addFriend(friendId: $id) {\n      _id\n      username\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_ITEM = gql`\n    mutation addItem($title: String!, $image: String!, $price: Int, $quantity: Int, $status: String) {\n        addItem(title: $title, image: $image, price: $price, quantity: $quantity, status: $status) {\n            _id\n            title\n            image\n            price\n            quantity\n            status\n        }\n    }\n`;\n\nexport const REMOVE_ITEM = gql`\n    mutation removeItem($_id: ID!) {\n        removeItem(_id: $_id) {\n            username\n            items {\n                _id\n                title\n            }\n        }\n    }\n`;","import React, { useState } from 'react';\nimport { Button, Card, Form } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const { data } = await login({\n        variables: { ...formState }\n      });\n    \n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n     // clear form values\n     setFormState({\n       email: '',\n       password: '',\n     });\n    };    \n    return (\n        <main>\n            <Card className='loginForm' md>\n                <Card.Header>Login</Card.Header>\n                <Card.Body>\n                    <Form onSubmit={handleFormSubmit}>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type='email' placeholder='Your email' id='email' name='email' value={formState.email}\n                onChange={handleChange} />\n                        </Form.Group>\n                        <Form.Group >\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type='password' placeholder='*******' id='password' name='password' value={formState.password}\n                onChange={handleChange} />\n                        </Form.Group>\n                        <Button className='submitButton' type='Submit'>\n                            Submit\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </main>\n    );\n};\n\nexport default Login;","import React, { useState } from 'react';\nimport { Button, Card, Form } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({ username: '', email: '', password: '', firstName: '', lastName: '' });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // use try/catch isntead of promises to handle errors\n    try { \n      // execute addUser mutation and pass in variable data from form\n      const { data } = await addUser({\n        variables: { ...formState }\n      });\n      Auth.login(data.addUser.token);\n      console.log(data);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main>\n        <Card className='loginForm'>\n            <Card.Header>Signup</Card.Header>\n            <Card.Body>\n                <Form onSubmit={handleFormSubmit}>\n                    <Form.Group>\n                        <Form.Label >User Name</Form.Label>\n                        <Form.Control type='input' placeholder='Your user name' id='username' name='username' value={formState.username} onChange={handleChange}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label >First Name</Form.Label>\n                        <Form.Control type='input' placeholder='Your first name' id='firstName' name='firstName' value={formState.firstName} onChange={handleChange} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label >Last Name</Form.Label>\n                        <Form.Control type='input' placeholder='Your last name' id='lastName' name='lastName' value={formState.lastName} onChange={handleChange} />\n                    </Form.Group>\n                    <Form.Group >\n                        <Form.Label >Email</Form.Label>\n                        <Form.Control type='email' placeholder='Your email' id='email' name='email' value={formState.email} onChange={handleChange} />\n                    </Form.Group>\n                    <Form.Group >\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type='password' placeholder='*******' id='password' name='password' value={formState.password} onChange={handleChange} />\n                    </Form.Group>\n                    <Button className='submitButton' type='Submit'>\n                        Submit\n                    </Button>\n                </Form>\n            </Card.Body>\n        </Card>\n        {error && <div>Sign up failed</div>}\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\nimport { Container, Row, Col, Button, Image } from 'react-bootstrap';\nimport photoOne from '../assets/images/James Hall/JamesHall_1.jpg';\nimport photoTwo from '../assets/images/James Hall/JamesHall_2.jpg';\n\n\n\nconst Profile = () => {\n\n\n    return (\n        <div>\n            <Container fluid>\n                <Row>\n                    <Col md={4}>\n                        <h4 className='m-3'>Username</h4>\n                        <Image fluid src={photoOne} />\n                        <p className='m-3 font-size:{1rem}'>Title</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>Price</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <h4 className='m-3'>Username</h4>\n                        <Image fluid src={photoTwo} />\n                        <p className='m-3'>Title</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>Price</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <h4 className='m-3'>Username</h4>\n                        <Image fluid src={photoOne} />\n                        <p className='m-3'>Title</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>Price</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <h4 className='m-3'>Username</h4>\n                        <Image fluid src={photoOne} />\n                        <p className='m-3'>Title</p>\n                        <div className='d-flex justify-content-around m-3'>\n                            <span>Price</span>\n                            <Button className='likeButton'>Like</Button>\n                            <Button className='likeButton'>Buy</Button>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport './App.css';\n\nimport Header from './components/Header';\n//import Feed from './components/Feed'\n\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Profile from './pages/Profile';\n\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n  uri: 'http://localhost:3001/graphql'\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n      <Router>\n        <Header />\n        {/* <Feed /> */}\n\n        <div>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route exact path='/login' component={Login} />\n            <Route exact path='/signup' component={Signup} />\n            <Route exact path='/profile' component={Profile} />\n          </Switch>\n        </div>\n      </Router>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/JamesHall_1.61ca52a9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JamesHall_2.776fc6e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JamesHall_3.e62a8a34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JamesHall_4.3e1a88a7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JamesHall_5.3d9be332.jpg\";"],"sourceRoot":""}